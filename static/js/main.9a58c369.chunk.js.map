{"version":3,"sources":["redux/actionTypes.js","redux/reducers/products.js","redux/reducers/index.js","components/Navbar.js","redux/actions/products.js","components/AddForm.js","components/EditForm.js","components/DeleteModal.js","components/Main.js","components/App.js","redux/index.js","serviceWorker.js","index.js"],"names":["LOAD_PRODUCTS","ADD_PRODUCT","REMOVE_PRODUCT","DEFAULT_STATE","products","rootReducer","combineReducers","state","action","type","items","item","filter","product","id","Navbar","className","AddForm","name","price","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addProduct","toggle","this","modalState","onClick","onSubmit","htmlFor","placeholder","onChange","required","Component","EditForm","editProduct","selectedRow","undefined","getLatestDate","editPreset","DeleteModal","style","backgroundColor","marginBottom","deleteProduct","Main","addmodal","editmodal","deletemodal","rowSelect","disablebtn","addtoggle","prevState","edittoggle","deletetoggle","condition","handleSelect","event","currentTarget","loadProducts","a","pricesArr","prices","map","i","date","Date","length","init","list","bind","key","disabled","connect","dispatch","Promise","resolve","reject","axios","get","then","data","res","localStorage","getItem","setItem","JSON","stringify","parse","catch","error","console","log","priceId","newItems","now","modifiedItems","foundProduct","remove","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","f","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a58c369.chunk.js","sourcesContent":["export const LOAD_PRODUCTS = \"LOAD_PRODUCTS\";\r\nexport const ADD_PRODUCT = \"ADD_PRODUCT\";\r\nexport const REMOVE_PRODUCT = \"REMOVE_PRODUCT\";","import { LOAD_PRODUCTS, ADD_PRODUCT, REMOVE_PRODUCT } from \"../actionTypes\";\r\n\r\nconst DEFAULT_STATE = {\r\n  products: []\r\n};\r\n\r\n\r\nexport default (state = DEFAULT_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOAD_PRODUCTS:\r\n      return {\r\n        products: action.items\r\n      };\r\n    case ADD_PRODUCT:\r\n      return {\r\n        products: [...state.products, action.item]\r\n      };\r\n    case REMOVE_PRODUCT:\r\n      return {\r\n        products: state.products.filter(product => product.id !== action.id)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport products from './products';\r\n\r\nconst rootReducer = combineReducers({\r\n  products,\r\n});\r\n\r\nexport default rootReducer;","import React from 'react'\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <div className=\"navbar\">\r\n        <span className=\"navbar-brand\">mPharma</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import { LOAD_PRODUCTS, ADD_PRODUCT, REMOVE_PRODUCT } from \"../actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport function products(items) {\r\n  return {\r\n    type: LOAD_PRODUCTS,\r\n    items\r\n  };\r\n}\r\n\r\nexport function add(item) {\r\n  return {\r\n    type: ADD_PRODUCT,\r\n    item\r\n  };\r\n}\r\n\r\nexport function remove(id) {\r\n  return {\r\n    type: REMOVE_PRODUCT,\r\n    id\r\n  }\r\n}\r\n\r\nexport const loadProducts = () => dispatch => {\r\n  let url = \"http://www.mocky.io/v2/5c3e15e63500006e003e9795\";\r\n  return new Promise((resolve, reject) => {\r\n    axios\r\n      .get(url)\r\n      .then(data => {\r\n        let res = data.data.products;\r\n        if (!localStorage.getItem(\"products\"))\r\n          localStorage.setItem(\"products\", JSON.stringify(res));\r\n        dispatch(products(JSON.parse(localStorage.getItem(\"products\"))));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        return reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexport const addProduct = (name, price) => dispatch => {\r\n  let items = JSON.parse(localStorage.getItem(\"products\"));\r\n  let id = [...items][items.length - 1].id;\r\n  let priceId = [...items][items.length - 1].prices[\r\n    [...items][items.length - 1].prices.length - 1\r\n  ].id;\r\n\r\n  let newItems = {\r\n    id: ++id,\r\n    name: name,\r\n    prices: [{ id: ++priceId, price: price, date: Date.now() }]\r\n  };\r\n  let modifiedItems = [...items, newItems];\r\n  localStorage.setItem(\"products\", JSON.stringify(modifiedItems));\r\n  dispatch(add(newItems));\r\n};\r\n\r\nexport const editProduct = (name, price, id) => dispatch => {\r\n  let items = JSON.parse(localStorage.getItem(\"products\"));\r\n  let foundProduct = items[id - 1];\r\n  let priceId = [...items][items.length - 1].prices[\r\n    [...items][items.length - 1].prices.length - 1\r\n  ].id;\r\n\r\n  foundProduct.name = name;\r\n  foundProduct.prices = [\r\n    ...foundProduct.prices,\r\n    { id: ++priceId, price: price, date: Date.now() }\r\n  ];\r\n\r\n  items[id - 1] = foundProduct;\r\n  localStorage.setItem(\"products\", JSON.stringify(items));\r\n\r\n  dispatch(products(JSON.parse(localStorage.getItem(\"products\"))));\r\n};\r\n\r\nexport const deleteProduct = id => dispatch => {\r\n  let items = JSON.parse(localStorage.getItem(\"products\"));\r\n  let foundProduct = items[id - 1];\r\n\r\n  delete foundProduct.name;\r\n  items[id - 1] = foundProduct;\r\n  localStorage.setItem(\"products\", JSON.stringify(items));\r\n\r\n  dispatch(remove(id));\r\n};","import React, {Component} from 'react';\r\n\r\nclass AddForm extends Component {\r\n  state = {\r\n    name: '',\r\n    price: ''\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addProduct(this.state.name, this.state.price);\r\n    this.setState({\r\n      name: '', price: ''\r\n    })\r\n    this.props.toggle();\r\n  }\r\n\r\n  render() {\r\n    const {name, price} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {this.props.modalState && (\r\n          <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <span onClick={this.props.toggle} className=\"close\">\r\n                  &times;\r\n                </span>\r\n                <h2>ADD NEW DRUG</h2>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                  <label htmlFor=\"fname\">Name:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"fname\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name of drug..\"\r\n                    onChange={this.handleChange}\r\n                    value={name}\r\n                    required\r\n                  />\r\n\r\n                  <label htmlFor=\"price1\">Price:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"price1\"\r\n                    name=\"price\"\r\n                    placeholder=\"Price..\"\r\n                    onChange={this.handleChange}\r\n                    value={price}\r\n                    required\r\n                  />\r\n\r\n                  <input type=\"submit\" value=\"Add\" />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddForm;\r\n","import React, {Component} from 'react';\r\n\r\nclass EditForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    price: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n     const name = this.props.selectedRow.name;\r\n     if (this.props.selectedRow.name !== undefined) {\r\n       var price = this.props.getLatestDate(this.props.selectedRow);\r\n     }\r\n     this.editPreset(name, price)\r\n  }\r\n  \r\n  editPreset(name, price) {\r\n    this.setState({\r\n      name,\r\n      price\r\n    })\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const {name, price} = this.state;\r\n    this.props.editProduct(name, price, this.props.selectedRow.id);\r\n    this.props.toggle();\r\n  }\r\n\r\n  render() {\r\n   \r\n    return (\r\n      <div>\r\n        {this.props.modalState && (\r\n          <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <span onClick={this.props.toggle} className=\"close\">\r\n                  &times;\r\n                </span>\r\n                <h2>EDIT DRUG</h2>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                  <label htmlFor=\"fname\">Name:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"fname\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name of drug..\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.name}\r\n                    required\r\n                  />\r\n\r\n                  <label htmlFor=\"price1\">Price:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"price1\"\r\n                    name=\"price\"\r\n                    placeholder=\"Price..\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.price}\r\n                    required\r\n                  />\r\n\r\n                  <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditForm;\r\n","import React from 'react';\r\n\r\nconst DeleteModal = (props) => {\r\n  \r\n  const handleDelete = () => {\r\n    props.deleteProduct(props.selectedRow.id);\r\n    props.toggle(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.modalState && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <div style={{backgroundColor:\"#FF3547\", marginBottom:\"0\"}} className=\"modal-header\">\r\n              <span onClick={e => props.toggle(false)} className=\"close\">&times;</span>\r\n              <h2>DELETE</h2>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p className=\"warn-words\">Are you sure to delete selected row?</p>\r\n            </div>\r\n            <div className=\"delete-btns\">\r\n              <button onClick={handleDelete} style={{backgroundColor:\"#ff3547\"}} className=\"delete-options\">\r\n                Yes\r\n              </button>\r\n              <button onClick={e => props.toggle(false)} style={{backgroundColor:\"#444551\"}} className=\"delete-options\">\r\n                No\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteModal;\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { loadProducts, addProduct, editProduct, deleteProduct } from \"../redux/actions/products\";\r\nimport AddForm from \"./AddForm\";\r\nimport EditForm from \"./EditForm\";\r\nimport DeleteModal from \"./DeleteModal\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    addmodal: false,\r\n    editmodal: false,\r\n    deletemodal: false,\r\n    rowSelect: null,\r\n    selectedRow: [],\r\n    disablebtn: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.loadProducts();\r\n  }\r\n\r\n  getLatestDate(item) {\r\n    let pricesArr = item.prices.map(i => {\r\n      i.date = new Date(i.date);\r\n      return i;\r\n    });\r\n\r\n    let a;\r\n    do {\r\n      a = false;\r\n      for (let i = 0; i < pricesArr.length - 1; i++) {\r\n        if (pricesArr[i].date > pricesArr[i + 1].date) {\r\n          let init = pricesArr[i];\r\n          pricesArr[i] = pricesArr[i + 1];\r\n          pricesArr[i + 1] = init;\r\n          a = true;\r\n        }\r\n      }\r\n    } while (a);\r\n\r\n    return pricesArr[pricesArr.length - 1].price;\r\n  }\r\n\r\n  addtoggle = () => {\r\n    this.setState(prevState => ({\r\n      addmodal: !prevState.addmodal\r\n    }));\r\n  };\r\n\r\n  edittoggle = () => {\r\n    this.setState(prevState => ({\r\n      editmodal: !prevState.editmodal\r\n    }));\r\n  };\r\n\r\n  deletetoggle = (condition) => {\r\n    this.setState(prevState => ({\r\n      deletemodal: !prevState.deletemodal,\r\n      disablebtn: condition ? true : false\r\n    }));\r\n  };\r\n\r\n  handleSelect = (item, event) => {\r\n    if (item && event.currentTarget) {\r\n      if (item.id - 1 !== this.state.rowSelect) {\r\n        this.setState({\r\n          rowSelect: item.id - 1,\r\n          selectedRow: item,\r\n          disablebtn: item.id - 1 === this.state.rowSelect\r\n        });\r\n      } else {\r\n        this.setState({\r\n          rowSelect: null,\r\n          disablebtn: true\r\n        });\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const list = this.props.products.map(\r\n      item =>\r\n        item.name && (\r\n          <tr\r\n            style={{\r\n              backgroundColor:\r\n                item.id - 1 === this.state.rowSelect ? \"#a4d4ff\" : \"\"\r\n            }}\r\n            onClick={this.handleSelect.bind(this, item)}\r\n            key={item.id}\r\n          >\r\n            <td>{item.name}</td>\r\n            <td>{this.getLatestDate(item)}</td>\r\n          </tr>\r\n        )\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"head-text\">\r\n          <p>{`${!this.state.disablebtn ? \"1\" : \"No\"} row selected`}</p>\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <div className=\"button-container-sub\">\r\n            <button\r\n              style={{ backgroundColor: \"#ffbb33\" }}\r\n              className=\"button\"\r\n              onClick={this.addtoggle}\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n          <div className=\"button-container-sub\">\r\n            <button\r\n              style={{ backgroundColor: \"#ffbb33\" }}\r\n              className=\"button\"\r\n              disabled={this.state.disablebtn}\r\n              onClick={this.edittoggle}\r\n            >\r\n              Edit\r\n            </button>\r\n          </div>\r\n          <div className=\"button-container-sub\">\r\n            <button\r\n              style={{ backgroundColor: \"#FF3547\" }}\r\n              className=\"button\"\r\n              disabled={this.state.disablebtn}\r\n              onClick={this.deletetoggle}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"table-row\">\r\n            <div className=\"table-row-col\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{list}</tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <AddForm\r\n          modalState={this.state.addmodal}\r\n          toggle={this.addtoggle}\r\n          addProduct={this.props.addProduct}\r\n        />\r\n        {this.state.editmodal && (\r\n          <EditForm\r\n            modalState={this.state.editmodal}\r\n            toggle={this.edittoggle}\r\n            selectedRow={this.state.selectedRow}\r\n            getLatestDate={this.getLatestDate}\r\n            editProduct={this.props.editProduct}\r\n          />\r\n        )}\r\n        {this.state.deletemodal && (\r\n          <DeleteModal\r\n            modalState={this.state.deletemodal}\r\n            toggle={this.deletetoggle}\r\n            selectedRow={this.state.selectedRow}\r\n            deleteProduct={this.props.deleteProduct}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  products: state.products.products\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loadProducts, addProduct, editProduct, deleteProduct }\r\n)(Main);\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"../redux\";\nimport NavBar from \"./Navbar\";\nimport Main from \"./Main\";\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <NavBar />\n    <Main />\n  </Provider>\n);\n\nexport default App;\n","import rootReducer from './reducers';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport function configureStore() {\r\n  const store = createStore(\r\n    rootReducer,\r\n    compose(\r\n      applyMiddleware(thunk),\r\n      window.__REDUX_DEVTOOLS_EXTENSION__\r\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        : f => f\r\n    )\r\n  );\r\n  return store;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}